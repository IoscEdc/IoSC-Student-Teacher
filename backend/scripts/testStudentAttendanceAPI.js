const axios = require('axios');\nconst mongoose = require('mongoose');\nrequire('dotenv').config();\n\n/**\n * Test script to verify student attendance API endpoints\n */\n\nconst BASE_URL = process.env.BASE_URL || 'http://localhost:5000';\n\n// Test configuration\nconst testConfig = {\n    // Replace these with actual values from your database\n    studentId: '6902126bf91c442b648f6ba0', // Replace with actual student ID\n    token: 'your-student-token-here', // Replace with actual student token\n    subjectId: '6902126bf91c442b648f6b9c' // Optional: specific subject ID\n};\n\nasync function testStudentAttendanceSummary() {\n    console.log('🧪 Testing Student Attendance Summary API');\n    console.log('==========================================');\n    \n    try {\n        const url = `${BASE_URL}/attendance/summary/student/${testConfig.studentId}`;\n        console.log(`📤 GET ${url}`);\n        \n        const response = await axios.get(url, {\n            headers: {\n                'Authorization': `Bearer ${testConfig.token}`,\n                'Content-Type': 'application/json'\n            }\n        });\n        \n        console.log('✅ Response Status:', response.status);\n        console.log('📊 Response Data Structure:');\n        console.log('  - success:', response.data.success);\n        console.log('  - message:', response.data.message);\n        \n        if (response.data.success && response.data.data) {\n            const data = response.data.data;\n            console.log('  - data type:', Array.isArray(data) ? 'array' : typeof data);\n            console.log('  - data length:', Array.isArray(data) ? data.length : 'N/A');\n            \n            if (Array.isArray(data) && data.length > 0) {\n                console.log('\\n📚 First Subject Summary:');\n                const firstSubject = data[0];\n                console.log('  - Subject ID:', firstSubject.subjectId?._id || firstSubject.subjectId);\n                console.log('  - Subject Name:', firstSubject.subjectId?.subName || 'Unknown');\n                console.log('  - Total Sessions:', firstSubject.totalSessions);\n                console.log('  - Present Count:', firstSubject.presentCount);\n                console.log('  - Absent Count:', firstSubject.absentCount);\n                console.log('  - Attendance %:', firstSubject.attendancePercentage);\n            }\n        }\n        \n        return response.data;\n        \n    } catch (error) {\n        console.log('❌ API Error:');\n        if (error.response) {\n            console.log('  - Status:', error.response.status);\n            console.log('  - Message:', error.response.data?.message || 'Unknown error');\n            console.log('  - Data:', JSON.stringify(error.response.data, null, 2));\n        } else {\n            console.log('  - Error:', error.message);\n        }\n        return null;\n    }\n}\n\nasync function testAttendanceRecords() {\n    console.log('\\n🧪 Testing Attendance Records API');\n    console.log('==================================');\n    \n    try {\n        const url = `${BASE_URL}/attendance/records`;\n        const params = {\n            studentId: testConfig.studentId,\n            limit: 10,\n            sortBy: 'date',\n            sortOrder: 'desc'\n        };\n        \n        if (testConfig.subjectId && testConfig.subjectId !== 'your-subject-id-here') {\n            params.subjectId = testConfig.subjectId;\n        }\n        \n        console.log(`📤 GET ${url}`);\n        console.log('📋 Params:', params);\n        \n        const response = await axios.get(url, {\n            params,\n            headers: {\n                'Authorization': `Bearer ${testConfig.token}`,\n                'Content-Type': 'application/json'\n            }\n        });\n        \n        console.log('✅ Response Status:', response.status);\n        console.log('📊 Response Data Structure:');\n        console.log('  - success:', response.data.success);\n        console.log('  - message:', response.data.message);\n        \n        if (response.data.success && response.data.data) {\n            const data = response.data.data;\n            console.log('  - records count:', data.records?.length || 0);\n            console.log('  - total records:', data.totalRecords || 0);\n            console.log('  - current page:', data.currentPage || 1);\n            console.log('  - total pages:', data.totalPages || 1);\n            \n            if (data.records && data.records.length > 0) {\n                console.log('\\n📝 First Attendance Record:');\n                const firstRecord = data.records[0];\n                console.log('  - Date:', firstRecord.date);\n                console.log('  - Session:', firstRecord.session);\n                console.log('  - Status:', firstRecord.status);\n                console.log('  - Subject:', firstRecord.subjectId?.subName || 'Unknown');\n            }\n        }\n        \n        return response.data;\n        \n    } catch (error) {\n        console.log('❌ API Error:');\n        if (error.response) {\n            console.log('  - Status:', error.response.status);\n            console.log('  - Message:', error.response.data?.message || 'Unknown error');\n        } else {\n            console.log('  - Error:', error.message);\n        }\n        return null;\n    }\n}\n\nasync function validateTestConfig() {\n    console.log('🔍 Validating Test Configuration');\n    console.log('================================');\n    \n    const issues = [];\n    \n    if (testConfig.token === 'your-student-token-here') {\n        issues.push('Student token not configured');\n    }\n    \n    if (testConfig.studentId === 'your-student-id-here') {\n        issues.push('Student ID not configured');\n    }\n    \n    if (!mongoose.Types.ObjectId.isValid(testConfig.studentId)) {\n        issues.push('Student ID is not a valid MongoDB ObjectId');\n    }\n    \n    if (testConfig.subjectId && testConfig.subjectId !== 'your-subject-id-here' && !mongoose.Types.ObjectId.isValid(testConfig.subjectId)) {\n        issues.push('Subject ID is not a valid MongoDB ObjectId');\n    }\n    \n    if (issues.length > 0) {\n        console.log('❌ Configuration Issues:');\n        issues.forEach(issue => console.log(`  - ${issue}`));\n        console.log('\\n📝 To fix these issues:');\n        console.log('1. Get a valid student token by logging in as a student');\n        console.log('2. Find a valid student ID from your database');\n        console.log('3. Optionally provide a valid subject ID for filtering');\n        return false;\n    }\n    \n    console.log('✅ Configuration looks good!');\n    return true;\n}\n\nasync function runTests() {\n    console.log('🚀 Student Attendance API Test Suite');\n    console.log('====================================\\n');\n    \n    // Validate configuration\n    const configValid = await validateTestConfig();\n    if (!configValid) {\n        console.log('\\n❌ Tests cannot run due to configuration issues.');\n        return;\n    }\n    \n    // Test 1: Student Attendance Summary\n    const summaryResult = await testStudentAttendanceSummary();\n    \n    // Test 2: Attendance Records\n    const recordsResult = await testAttendanceRecords();\n    \n    // Summary\n    console.log('\\n📊 Test Results Summary');\n    console.log('=======================');\n    console.log('Student Summary API:', summaryResult ? '✅ Success' : '❌ Failed');\n    console.log('Attendance Records API:', recordsResult ? '✅ Success' : '❌ Failed');\n    \n    if (summaryResult && recordsResult) {\n        console.log('\\n🎉 All tests passed! The student attendance APIs are working correctly.');\n    } else {\n        console.log('\\n⚠️ Some tests failed. Check the error messages above for details.');\n    }\n}\n\n// Instructions\nconsole.log('📋 Student Attendance API Test Instructions:');\nconsole.log('1. Update testConfig with valid student token and ID');\nconsole.log('2. Ensure the backend server is running');\nconsole.log('3. Run: node backend/scripts/testStudentAttendanceAPI.js --run');\nconsole.log('');\n\n// Run tests if requested\nif (process.argv.includes('--run')) {\n    runTests().catch(console.error);\n} else {\n    console.log('💡 Add --run flag to execute tests');\n}\n\nmodule.exports = { testStudentAttendanceSummary, testAttendanceRecords };"